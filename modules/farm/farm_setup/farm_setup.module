<?php
/**
 * @file
 * Farm setup module.
 */

/**
 * Implements hook_hook_info().
 */
function farm_setup_hook_info() {
  $hooks['farm_setup_forms'] = array(
    'group' => 'farm_setup',
  );
  return $hooks;
}

/**
 * Implements hook_permission().
 */
function farm_setup_permission() {
  return array(
    'access farm setup' => array(
      'title' => t('Access farm setup'),
      'description' => t('Change farmOS configurations via the farm setup wizard.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_farm_access_perms().
 */
function farm_setup_farm_access_perms($role) {
  $perms = array();

  // Load the list of farm roles.
  $roles = farm_access_roles();

  // If this role has 'config' access, allow them to use the setup wizard.
  if (!empty($roles[$role]['access']['config'])) {
    $perms[] = 'access farm setup';
  }

  return $perms;
}

/**
 * Implements hook_menu().
 */
function farm_setup_menu() {

  // Start with an empty menu items array.
  $items = array();

  $items['farm/setup/wizard'] = array(
    'title' => 'Setup Wizard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_setup_wizard_form'),
    'access arguments' => array('access farm setup'),
  );

  // Create the root setup page callback.
  $items['farm/setup'] = array(
    'title' => 'Setup',
    'page callback' => 'farm_setup_wizard_page',
    'access arguments' => array('access farm setup'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
    'weight' => 90,
  );

  // Create a default menu tab.
  $items['farm/setup/start'] = array(
    'title' => 'Wizard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );

  // Ask for setup forms from modules.
  $forms = farm_setup_forms('setup page');

  // Add a menu item for each form.
  foreach ($forms as $name => $form) {

    // Build a menu item definition.
    $menu_item = array(
      'title' => $form['label'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('farm_setup_form', $form),
      'access arguments' => array('access farm setup'),
      'type' => MENU_LOCAL_TASK,
      'weight' => $form['weight'],
    );

    // If the setup form code is in a separate file, add that information
    // to the menu item so Drupal knows where to look.
    if (!empty($form['file']) && !empty($form['module'])) {
      $menu_item['file'] = $form['file'];
      $menu_item['file path'] = drupal_get_path('module', $form['module']);
    }

    // Add a menu item.
    $items['farm/setup/' . $name] = $menu_item;
  }

  // Return menu items.
  return $items;
}

/**
 * Setup start form callback.
 */
function farm_setup_wizard_form($form, &$form_state) {
  drupal_set_title(t('farmOS Setup Wizard'));

  // Initialize a description of the steps for the wizard.
  if (empty($form_state['setup_wizard'])) {
    $form_state['setup_wizard']['step'] = 0;

    // Load all the setup forms.
    $forms = array_values(farm_setup_forms('wizard'));
    $form_state['setup_wizard']['step_information'] = $forms;
  }

  $step = &$form_state['setup_wizard']['step'];

   // Get info about the next step
  $step_info = $form_state['setup_wizard']['step_information'][$step];

  // Load include files if required.
  if (isset($step_info['include_file'])) {
    form_load_include($form_state, 'inc', $step_info['module'], $step_info['include_file']);
  }

  // Call the custom form function.
  $form = $step_info['form']($form, $form_state);



  // Add a control fieldset and back button to all pages but
  // the first and last. Note that #submit is set to
  // a special submit handler, and that we use #limit_validation_errors to
  // skip all complaints about validation when using the back button. The
  // values entered will be discarded, but they will not be validated, which
  // would be annoying in a "back" button.
  if ($step > 0 && $step < count($form_state['setup_wizard']['step_information']) - 1) {
    $form['controls'] = array(
      '#type' => 'fieldset',
    );

    $form['controls']['back'] = array(
      '#type' => 'submit',
      '#value' => t('Back'),
      '#name' => 'back',
      '#submit' => array('farm_setup_wizard_form_back_submit'),
      '#limit_validation_errors' => array(),
    );
  }

  // Show the Next button only if there are more steps defined.
  // Don't show the Next button on the start page, a Start button is provided.
  if ($step > 0 && $step < count($form_state['setup_wizard']['step_information']) - 1) {
    // The Next button should be included on every step.
    $form['controls']['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('farm_setup_wizard_form_next_submit'),
    );
  }

  // Include each validation function defined for the different steps.
  if (function_exists($form_state['setup_wizard']['step_information'][$step]['form'] . '_validate')) {
    $form['controls']['next']['#validate'] = array($form_state['setup_wizard']['step_information'][$step]['form'] . '_validate');
  }

  // Include submit functions defined for the different steps.
  if (function_exists($form_state['setup_wizard']['step_information'][$step]['form'] . '_submit')) {
    $form['controls']['next']['#submit'][] = $form_state['setup_wizard']['step_information'][$step]['form'] . '_submit';
  }

  return $form;
}

/**
 * Form back submit callback for loading the previous module step.
 */
function farm_setup_wizard_form_back_submit($form, &$form_state) {
  $current_step = &$form_state['setup_wizard']['step'];

  if ($current_step > 0) {
    $current_step--;

    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;
    return;
  }
}

/**
 * Form submit callback for loading the next module step.
 */
function farm_setup_wizard_form_next_submit($form, &$form_state) {
  $current_step = &$form_state['setup_wizard']['step'];

  if ($current_step < count($form_state['setup_wizard']['step_information'])) {
    $current_step++;

    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;
    return;
  }
}

/**
 * Setup form callback.
 */
function farm_setup_form($form, &$form_state, $form_info) {
  drupal_set_title(t('Setup') . ': ' . $form_info['label']);

  // Call the custom form function.
  $form = $form_info['form']($form, $form_state);

  // Add a Submit button to all forms except for the finished form.
  if ($form_info['form'] != 'farm_setup_finish_form') {
    $form['controls'] = array(
      '#type' => 'fieldset',
    );

    $form['controls']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    // Include each validation function defined for the different steps.
    if (function_exists($form_info['form'] . '_validate')) {
      $form['controls']['submit']['#validate'] = array($form_info['form'] . '_validate');
    }

    // Include submit functions defined for the different steps.
    if (function_exists($form_info['form'] . '_submit')) {
      $form['controls']['submit']['#submit'][] = $form_info['form'] . '_submit';
    }
  }

  return $form;
}

/**
 * Setup wizard page callback.
 */
function farm_setup_wizard_page() {
  drupal_set_title(t('farmOS Setup'));

  return array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('The setup wizard will guide you through the process of configuring your farmOS.') . '</p><p>' . l('Go to the wizard', '/farm/setup/wizard' ) . '</p>',
  );
}

/**
 * Load information about all setup forms provided by other modules.
 * @param $display
 *    Optional, only load forms visible to a certain display type, 'wizard' or 'setup page'.
 * @return array
 */
function farm_setup_forms($display = NULL) {

  // Ask modules for setup forms.
  $forms = array();
  $modules = module_implements('farm_setup_forms');
  foreach ($modules as $module) {
    $module_forms = module_invoke($module, 'farm_setup_forms');
    foreach ($module_forms as $name => &$form) {
      $form['module'] = $module;
      // Set the file key if the form is defined in an include file.
      // This is used when adding the form to the menu.
      if (isset($form['include_file'])) {
        $form['file'] = $form['include_file'] . '.inc';
      }
      $form['weight'] = !empty($form['weight']) ? $form['weight'] : 0;

      // Set default display values.
      // Initialize a display array if not provided.
      $form['display'] = !empty($form['display']) ? $form['display'] : array();
      // Set the wizard display option, defaults to TRUE
      $form['display']['wizard'] = isset($form['display']['wizard']) ? $form['display']['wizard'] : TRUE;
      // Set the setup page display option, defaults to TRUE
      $form['display']['setup page'] = isset($form['display']['setup page']) ? $form['display']['setup page'] : TRUE;

      // If forms for a specific display were requested,
      // only merge forms with that display type enabled.
      if ($display != NULL) {
        if (isset($form['display'][$display]) && !$form['display'][$display]) {
          unset($module_forms[$name]);
        }
      }
    }
    $forms = array_merge($forms, $module_forms);
  }

  // Sort the setup forms.
  uasort($forms, 'farm_setup_forms_sort');

  // Return the array of setup forms.
  return $forms;
}

/**
 * Sort function for setup form definitions.
 */
function farm_setup_forms_sort($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}
